''' Insertion Sort
Algorithm
1.Start from the second element (index 1).
2.Compare it with elements to its left.
3.Shift all elements greater than the current element to the right.
4.Insert the current element into its correct position.
5.Repeat steps 2–4 for all elements in the array.

 Selection Sort
Algorithm
1.Start from the first element.
2.Find the minimum element in the unsorted portion.
3.Swap it with the first unsorted element.
4.Move to the next position and repeat steps 2–3.
5.Continue until the array is sorted.


CODE:
'''
def insertion_sort(arr):
    for i in range(1, len(arr)):
        key = arr[i]
        j = i - 1
        while j >= 0 and arr[j] > key:
            arr[j + 1] = arr[j]
            j -= 1
        arr[j + 1] = key
    return arr
def selection_sort(arr):
    n = len(arr)
    for i in range(n):
        min_index = i
        for j in range(i+1, n):
            if arr[j] < arr[min_index]:
                min_index = j
        arr[i], arr[min_index] = arr[min_index], arr[i]
    return arr
arr = [64, 25, 12, 22, 11]

print("Insertion Sort:", insertion_sort(arr.copy()))
print("Selection Sort:", selection_sort(arr.copy()))

'''
Analysis:
Feature	                 Insertion Sort	  Selection Sort
Best Time	                          O(n)	   O(n²)
Average/Worst Time	          O(n²)	   O(n²)
Space	                          O(1)	   O(1)
Stable	                           Yes	    No
Swaps	                           Less	   More (fixed n swaps)
Use When          	Nearly sorted list  Simple but unstable
'''