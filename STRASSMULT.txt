import numpy as np

def strassen(A, B):
    n = A.shape[0]

    # Base case: use normal multiplication for small matrices
    if n == 1:
        return A * B

    # Divide matrices into quadrants
    mid = n // 2
    A11, A12 = A[:mid, :mid], A[:mid, mid:]
    A21, A22 = A[mid:, :mid], A[mid:, mid:]
    B11, B12 = B[:mid, :mid], B[:mid, mid:]
    B21, B22 = B[mid:, :mid], B[mid:, mid:]

    # 7 recursive multiplications
    M1 = strassen(A11 + A22, B11 + B22)
    M2 = strassen(A21 + A22, B11)
    M3 = strassen(A11, B12 - B22)
    M4 = strassen(A22, B21 - B11)
    M5 = strassen(A11 + A12, B22)
    M6 = strassen(A21 - A11, B11 + B12)
    M7 = strassen(A12 - A22, B21 + B22)

    # Combine submatrices into result
    C11 = M1 + M4 - M5 + M7
    C12 = M3 + M5
    C21 = M2 + M4
    C22 = M1 - M2 + M3 + M6

    # Combine quadrants into final matrix
    top = np.hstack((C11, C12))
    bottom = np.hstack((C21, C22))
    return np.vstack((top, bottom))

# Example usage
A = np.array([[1, 2], [3, 4]])
B = np.array([[5, 6], [7, 8]])
result = strassen(A, B)
print("Strassen's Multiplication Result:\n", result)

'''
1. If n == 1:
       Return A[0][0] × B[0][0]

2. Partition A into 4 submatrices:
       A11, A12, A21, A22  ←  submatrices of size (n/2) × (n/2)

3. Partition B into 4 submatrices:
       B11, B12, B21, B22  ←  submatrices of size (n/2) × (n/2)

4. Compute the following 7 matrix products recursively:

       M1 ← STRASSEN(A11 + A22, B11 + B22)
       M2 ← STRASSEN(A21 + A22, B11)
       M3 ← STRASSEN(A11, B12 - B22)
       M4 ← STRASSEN(A22, B21 - B11)
       M5 ← STRASSEN(A11 + A12, B22)
       M6 ← STRASSEN(A21 - A11, B11 + B12)
       M7 ← STRASSEN(A12 - A22, B21 + B22)

5. Calculate submatrices of result matrix C:

       C11 ← M1 + M4 - M5 + M7
       C12 ← M3 + M5
       C21 ← M2 + M4
       C22 ← M1 - M2 + M3 + M6

6. Combine submatrices C11, C12, C21, C22 into one matrix C

7. Return matrix C
'''