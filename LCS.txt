def lcs(X, Y):
    # Get lengths of the two strings
    m = len(X)
    n = len(Y)
    
    # Create a 2D array to store lengths of longest common subsequence
    dp = [[0] * (n + 1) for _ in range(m + 1)]
    
    # Fill the dp table
    for i in range(1, m + 1):
        for j in range(1, n + 1):
            if X[i - 1] == Y[j - 1]:
                dp[i][j] = dp[i - 1][j - 1] + 1  # If characters match, extend the subsequence
            else:
                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])  # Else take the maximum of the previous values
    
    # Reconstruct the LCS from the dp table
    lcs_str = []
    i, j = m, n
    while i > 0 and j > 0:
        if X[i - 1] == Y[j - 1]:
            lcs_str.append(X[i - 1])
            i -= 1
            j -= 1
        elif dp[i - 1][j] >= dp[i][j - 1]:
            i -= 1
        else:
            j -= 1
    
    # The LCS is constructed in reverse order, so reverse it
    lcs_str.reverse()
    lcs_str = ''.join(lcs_str)  # Convert list of characters to string
    
    # Return both the length of the LCS and the LCS itself
    return dp[m][n], lcs_str

# Example usage:
X = "AGGTAB"
Y = "GXTXAYB"
length, lcs_string = lcs(X, Y)

print(f"Length of Longest Common Subsequence: {length}")
print(f"Longest Common Subsequence: {lcs_string}")

'''
time 0(mxn)where m is the length of string X and n is the length of string Y. This is because we are filling a 2D table of size m×n and each cell computation takes constant time.
Space Complexity: O(m×n), due to the space used by the 2D DP table.
'''