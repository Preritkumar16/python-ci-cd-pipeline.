'''Rabin-Karp Algorithm
1. Compute the hash of the pattern.
2. Compute the hash of each substring of text with the same length as the pattern using a rolling hash.
3. If the hash of a substring matches the pattern's hash, compare the strings directly.
4. Repeat until the end of the text.

CODE:
'''
def rabin_karp(text, pattern, prime=101):
    n, m = len(text), len(pattern)
    d = 256  # number of characters in input alphabet
    h = pow(d, m-1) % prime  # value of d^(m-1)
    
    p_hash = 0  # hash for pattern
    t_hash = 0  # hash for text window

    # Calculate initial hash values for pattern and first window
    for i in range(m):
        p_hash = (d * p_hash + ord(pattern[i])) % prime
        t_hash = (d * t_hash + ord(text[i])) % prime

    # Slide the pattern over the text
    for i in range(n - m + 1):
        if p_hash == t_hash:
            # Check characters one by one
            if text[i:i + m] == pattern:
                print(f"Pattern found at index {i}")
        
        if i < n - m:
            # Calculate hash for next window
            t_hash = (d * (t_hash - ord(text[i]) * h) + ord(text[i + m])) % prime
            if t_hash < 0:
                t_hash += prime
text = "ababcabcabababd"
pattern = "ababd"
rabin_karp(text, pattern)

'''
Analysis:
Let n = length of text, m = length of pattern

Case	      Time Complexity	Reason
Best	        O(n + m)	               Hashes never collide
Average	O(n + m)	              Very few hash collisions
Worst	O(n Ã— m)	              All hash values match but strings differ

Space Complexity
O(1) if just checking match
O(k) if storing all matches
'''