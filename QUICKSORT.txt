def partition(arr, low, high):
    pivot = arr[high]  # Pivot is the last element
    i = low - 1         # Index of smaller element

    for j in range(low, high):
        if arr[j] < pivot:
            i += 1
            arr[i], arr[j] = arr[j], arr[i]  # Swap

    arr[i + 1], arr[high] = arr[high], arr[i + 1]  # Move pivot to correct position
    return i + 1

def quick_sort(arr, low, high):
    if low < high:
        pi = partition(arr, low, high)  # Partitioning index
        quick_sort(arr, low, pi - 1)    # Sort left side
        quick_sort(arr, pi + 1, high)   # Sort right side

# Example usage
arr = [10, 7, 8, 9, 1, 5]
quick_sort(arr, 0, len(arr) - 1)
print("Sorted array:", arr)

'''Time and Space Complexity Analysis
 Time Complexity:
Best Case (O(n log n)):
Occurs when the pivot divides the array into two nearly equal halves.
Average Case (O(n log n)):
On average, the division is reasonably balanced.
Worst Case (O(n²)):
Happens when the pivot is the smallest or largest element every time (e.g., sorted array with bad pivot choice).
🔹 Space Complexity:
O(n) due to the use of extra space for the left, middle, and right sublists in each recursive call (functional style).
ALGORITHM
QUICK_SORT(A, low, high):
    if low < high:
        pivotIndex ← PARTITION(A, low, high)
        QUICK_SORT(A, low, pivotIndex - 1)
        QUICK_SORT(A, pivotIndex + 1, high)
        
 PARTITION(A, low, high):
    pivot ← A[high]
    i ← low - 1

    for j ← low to high - 1:
        if A[j] < pivot:
            i ← i + 1
            swap A[i] and A[j]

    swap A[i + 1] and A[high]
    return i + 1
'''